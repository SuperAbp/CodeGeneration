@using AbpCodeGeneration.VisualStudio.Common.Model
@inherits RazorEngine.Templating.TemplateBase<CreateFileInput>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Threading.Tasks;
using @Model.Namespace.@(Model.DirectoryName).Dtos;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Authorization;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Domain.Repositories;
using @(Model.Namespace).Permissions;

namespace @Model.Namespace.@Model.DirectoryName
{
    /// <summary>
    /// @(Model.LocalName)管理
    /// </summary>
    [Authorize(@(Model.AbsoluteNamespace)Permissions.@(Model.ClassName)s.Default)]
    public class @(Model.ClassName)AppService : @(Model.AbsoluteNamespace)AppService, I@(Model.ClassName)AppService
    {
        private readonly IRepository<@(Model.ClassName), @Model.KeyType> _@(Model.CamelClassName)Repository;

        /// <summary>
        /// .ctor
        /// </summary>
        /// <param name="@(Model.CamelClassName)Repository"></param>
        public @(Model.ClassName)AppService(IRepository<@(Model.ClassName), @Model.KeyType> @(Model.CamelClassName)Repository)
        {
            _@(Model.CamelClassName)Repository = @(Model.CamelClassName)Repository;
        }
            
        /// <summary>
        /// 获取
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        public virtual async Task<@(Model.ClassName)DetailDto> GetAsync(@(Model.KeyType) id)
        {
            @(Model.ClassName) entity = await _@(Model.CamelClassName)Repository.GetAsync(id);

            return ObjectMapper.Map<@(Model.ClassName), @(Model.ClassName)DetailDto>(entity);
        }

        /// <summary>
        /// 分页
        /// </summary>
        /// <param name="input">查询条件</param>
        /// <returns>分页结果</returns>
        public virtual async Task<PagedResultDto<@(Model.ClassName)ListDto>> GetListAsync(Get@(Model.ClassName)sInput input)
        {
            await NormalizeMaxResultCountAsync(input);

            var tempQuery = _@(Model.CamelClassName)Repository;

            long totalCount = await tempQuery.GetCountAsync();
            
            var entities = await tempQuery
                .OrderBy(input.Sorting ?? "Id DESC")
                .Skip(input.SkipCount)
                .Take(input.MaxResultCount)
                .ToListAsync();

            var dtos = ObjectMapper.Map<List<@(Model.ClassName)>, List<@(Model.ClassName)ListDto>>(entities);

            return new PagedResultDto<@(Model.ClassName)ListDto>(totalCount, dtos);
        }

        /// <summary>
        /// 获取修改
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        public virtual async Task<Get@(Model.ClassName)ForEditOutput> GetEditAsync(@(Model.KeyType) id)
        {
            @(Model.ClassName) entity = await _@(Model.CamelClassName)Repository.GetAsync(id);

            return ObjectMapper.Map<@(Model.ClassName), Get@(Model.ClassName)ForEditOutput>(entity);
        }
    
        /// <summary>
        /// 创建
        /// </summary>
        /// <param name="input"></param>
        /// <returns></returns>
        [Authorize(@(Model.AbsoluteNamespace)Permissions.@(Model.ClassName)s.Create)]
        public virtual async Task<@(Model.ClassName)ListDto> CreateAsync(@(Model.ClassName)CreateDto input)
        {
            var entity = ObjectMapper.Map<@(Model.ClassName)CreateDto, @(Model.ClassName)>(input);
            entity = await _@(Model.CamelClassName)Repository.InsertAsync(entity);
            return ObjectMapper.Map<@(Model.ClassName), @(Model.ClassName)ListDto>(entity);
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="id">主键</param>
        /// <param name="input"></param>
        /// <returns></returns>
        [Authorize(@(Model.AbsoluteNamespace)Permissions.@(Model.ClassName)s.Edit)]
        public virtual async Task<@(Model.ClassName)ListDto> UpdateAsync(@(Model.KeyType) id, @(Model.ClassName)UpdateDto input)
        {
            @(Model.ClassName) entity = await _@(Model.CamelClassName)Repository.GetAsync(id);
            entity = ObjectMapper.Map(input, entity);
            entity = await _@(Model.CamelClassName)Repository.UpdateAsync(entity);
            return ObjectMapper.Map<@(Model.ClassName), @(Model.ClassName)ListDto>(entity);
        }

        /// <summary>
        /// 删除@(Model.LocalName)
        /// </summary>
        /// <param name="id">主键</param>
        /// <returns></returns>
        [Authorize(@(Model.AbsoluteNamespace)Permissions.@(Model.ClassName)s.Delete)]
        public virtual async Task DeleteAsync(@Model.KeyType id)
        {
            await _@(Model.CamelClassName)Repository.DeleteAsync(s => s.Id == id);
        }

        @*/// <summary>
        /// 批量删除@(Model.LocalName)
        /// </summary>
        [AbpAuthorize(@(Model.AbsoluteNamespace)Permissions.@(Model.ClassName)s.BatchDelete)]
        public async Task BatchDelete@(Model.ClassName)s(List<@Model.KeyType> input)
        {
            await _@(Model.CamelClassName)Repository.DeleteAsync(a => input.Contains(a.Id));
        }*@

        /// <summary>
        /// 规范最大记录数
        /// </summary>
        /// <param name="input">参数</param>
        /// <returns></returns>
        private async Task NormalizeMaxResultCountAsync(PagedAndSortedResultRequestDto input)
        {
            var maxPageSize = (await SettingProvider.GetOrNullAsync(@(Model.ClassName)Settings.MaxPageSize))?.To<int>();
            if (maxPageSize.HasValue && input.MaxResultCount > maxPageSize.Value)
            {
                input.MaxResultCount = maxPageSize.Value;
            }
        }
    }
}
