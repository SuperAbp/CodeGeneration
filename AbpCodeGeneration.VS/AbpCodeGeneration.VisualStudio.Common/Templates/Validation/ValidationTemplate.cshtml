@using RazorEngine
@using AbpCodeGeneration.VisualStudio.Common.Model
@inherits RazorEngine.Templating.TemplateBase<CreateFileInput>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text;
using Abp.AutoMapper;
using FluentValidation;
using Abp.Application.Services.Dto;
using @(Model.Namespace).@(Model.DirectoryName).Dto;

namespace @(Model.Namespace).@(Model.DirectoryName).Validators
{
    public class CreateUpdate@(Model.ClassName)Validator : @(Model.AbsoluteNamespace)Validator<CreateUpdate@(Model.ClassName)Dto>
    {
        public CreateUpdate@(Model.ClassName)Validator()
        {
            @foreach (DtoPropertyInfo classProperty in Model.PropertyInfos)
            {
                if (classProperty.IsValidate)
                {
                    <text>RuleFor(m => m.@(classProperty.PropertyName))</text>
                    if (classProperty.Required)
                    {
                        <text>.NotNull()</text>
                        <text>.WithMessage(L("IsRequired", "{PropertyName}"))</text>
                        <text>.NotEmpty()</text>
                        <text>.WithMessage(L("IsRequired", "{PropertyName}"))</text>
                    }
                    if (classProperty.MinLength.HasValue)
                    {
                        <text>.MaximumLength(@classProperty.MinLength.Value)</text>
                        <text>.WithMessage(L("OnMinLength", "{PropertyName}", "{MinLength}"))</text>
                    }
                    if(classProperty.MaxLength.HasValue)
                    {
                        <text>.MaximumLength(@classProperty.MaxLength.Value)</text>
                        <text>.WithMessage(L("UnderMaxLength", "{PropertyName}", "{MaxLength}"))</text>
                    }
                    if(!String.IsNullOrEmpty(classProperty.Regular))
                    {
                        <text>.Matches("@classProperty.Regular")</text>
                        <text>.WithMessage(L("EnterRight", "{PropertyName}"))</text>
                    }
                    <text>;</text>
                }
            }
        }
    }
}
